name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Test and build job
  test:
    name: Test and Build
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd "pg_isready -U test_user -d test_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev postgresql-client

      - name: Wait for PostgreSQL
        env:
          PGPASSWORD: test_password
        run: |
          for i in {1..30}; do
            psql -h localhost -U test_user -d test_db -c 'SELECT 1;' >/dev/null 2>&1 && echo "PostgreSQL is ready" && break
            echo "Waiting for PostgreSQL... ($i)"
            sleep 2
          done
          psql -h localhost -U test_user -d test_db -c 'SELECT version();'

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db?sslmode=disable
        run: cargo run -p migration

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run Clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db?sslmode=disable
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_key_for_testing_purposes_only
          SMTP_HOST: smtp.gmail.com
          SMTP_PORT: 587
          SMTP_USERNAME: test@example.com
          SMTP_PASSWORD: test_password
          FROM_EMAIL: test@example.com
          FROM_NAME: Test System
        run: cargo test --verbose

      - name: PostgreSQL post-job cleanup
        if: always()
        env:
          PGPASSWORD: test_password
        run: |
          echo "Terminating connections and dropping test database..."
          psql -h localhost -U test_user -d postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname='test_db' AND pid <> pg_backend_pid();" || true
          psql -h localhost -U test_user -d postgres -c "DROP DATABASE IF EXISTS test_db;" || true

      - name: Build release
        run: cargo build --release

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: axum-template-binary
          path: target/release/axum-template

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      # - name: Run security audit
      #   run: cargo audit

  # Deploy to VPS
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST_IP }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT || 22 }}
          script: |
            # Navigate to application directory
            cd /www/dk_project/dk_app/axum_template || exit 1

            # Pull latest changes
            git pull origin master

            # Stop current services (single compose file only)
            docker-compose down

            # Build and start services using only docker-compose.yml
            docker-compose up -d --build

            # Clean up unused images
            docker system prune -f --all

            # Health check
            sleep 30
            # Adjusted to match APP_PORT default (3003) in docker-compose.yml
            curl -f http://localhost:3003/health || exit 1

            echo "Deployment completed successfully!"

  # Notify deployment status
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Notify Success
        if: needs.deploy.result == 'success'
        run: |
          echo "üöÄ Deployment successful!"
          # Add notification logic here (Slack, Discord, etc.)

      - name: Notify Failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          # Add notification logic here (Slack, Discord, etc.)
          exit 1
